src/
├── app/
│   └── store.js
├── features/
│   ├── auth/
│   │   └── authSlice.js
│   └── users/
│       └── usersSlice.js
├── components/
│   ├── Home.js
│   ├── Inform.js
│   ├── Login.js
│   ├── Listing.js
│   └── Register.js
└── index.js

----


store.js

import { configureStore } from '@reduxjs/toolkit';
import authReducer from '../features/auth/authSlice';
import usersReducer from '../features/users/usersSlice';

export const store = configureStore({
  reducer: {
    auth: authReducer,
    users: usersReducer,
  },
});


authSlice.js

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export const loginUser = createAsyncThunk('auth/loginUser', async (credentials, thunkAPI) => {
  try {
    const response = await fetch('http://localhost:5000/api/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(credentials),
    });
    const data = await response.json();
    if (!response.ok) throw new Error(data.message || 'Login failed');
    localStorage.setItem('user', JSON.stringify(data.user));
    return data.user;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

const authSlice = createSlice({
  name: 'auth',
  initialState: {
    user: null,
    loading: false,
    error: null,
  },
  reducers: {
    logout: (state) => {
      localStorage.removeItem('user');
      state.user = null;
    },
    loadUserFromStorage: (state) => {
      const storedUser = localStorage.getItem('user');
      if (storedUser) state.user = JSON.parse(storedUser);
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(loginUser.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        state.loading = false;
        state.user = action.payload;
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  },
});

export const { logout, loadUserFromStorage } = authSlice.actions;
export default authSlice.reducer;


usersSlice.js

import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

export const fetchUsers = createAsyncThunk('users/fetchUsers', async (email, thunkAPI) => {
  try {
    const response = await fetch(`http://localhost:5000/api/users?email=${email}`);
    const data = await response.json();
    if (!response.ok) throw new Error(data.message || 'Failed to fetch users');
    return data;
  } catch (error) {
    return thunkAPI.rejectWithValue(error.message);
  }
});

export const toggleUserStatus = createAsyncThunk('users/toggleUserStatus', async ({ id, currentStatus }, thunkAPI) => {
  await fetch(`http://localhost:5000/api/Active/${id}/status`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ active: !currentStatus }),
  });
  thunkAPI.dispatch(fetchUsers(thunkAPI.getState().auth.user.email));
});

export const updateUserField = createAsyncThunk('users/updateUserField', async ({ id, field, value }, thunkAPI) => {
  await fetch(`http://localhost:5000/api/update/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ [field]: value }),
  });
  thunkAPI.dispatch(fetchUsers(thunkAPI.getState().auth.user.email));
});

export const deleteUser = createAsyncThunk('users/deleteUser', async (id, thunkAPI) => {
  await fetch(`http://localhost:5000/api/delete/${id}`, { method: 'DELETE' });
  thunkAPI.dispatch(fetchUsers(thunkAPI.getState().auth.user.email));
});

export const deleteAllUsers = createAsyncThunk('users/deleteAllUsers', async (_, thunkAPI) => {
  await fetch('http://localhost:5000/api/delete', { method: 'DELETE' });
  thunkAPI.dispatch(fetchUsers(thunkAPI.getState().auth.user.email));
});

const usersSlice = createSlice({
  name: 'users',
  initialState: {
    list: [],
    loading: false,
    error: null,
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsers.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.loading = false;
        state.list = action.payload;
      })
      .addCase(fetchUsers.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  },
});

export default usersSlice.reducer;



index.js

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import { Provider } from 'react-redux';
import { store } from './app/store';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}>
    <App />
  </Provider>
);


